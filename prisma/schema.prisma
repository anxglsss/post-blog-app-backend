generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int          @unique @default(autoincrement())
  email              String       @unique
  password           String
  name               String
  posts              Post[]
  comments           Comment[]
  likes              Like[]
  favorites          Favorite[]
  requestSent        Request[]    @relation("SentRequest")
  requestReceived    Request[]    @relation("ReceiveRequest")
  friendshipsAsUser1 Friendship[] @relation("User1Friendships")
  friendshipsAsUser2 Friendship[] @relation("User2Friendships")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int        @unique @default(autoincrement())
  title     String
  content   String
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     Like[]
  favorites Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       Int    @unique @default(autoincrement())
  content  String
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id     Int  @unique @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Favorite {
  id     Int  @unique @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Request {
  id          Int    @unique @default(autoincrement())
  requester   User   @relation("SentRequest", fields: [requesterId], references: [id])
  requesterId Int
  receiver    User   @relation("ReceiveRequest", fields: [receiverId], references: [id])
  receiverId  Int
  status      Status @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  id      Int  @id @default(autoincrement())
  user1   User @relation("User1Friendships", fields: [user1Id], references: [id])
  user1Id Int
  user2   User @relation("User2Friendships", fields: [user2Id], references: [id])
  user2Id Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
